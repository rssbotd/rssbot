#!/usr/bin/env python3
# This file is placed in the Public Domain.


"simulate clients"


import os
import random
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from rssbot.cmnd    import STARTTIME, Commands, Config, command, parse
from rssbot.errors  import Errors
from rssbot.handler import Client, Event
from rssbot.main    import enable
from rssbot.object  import Object, fmt, keys
from rssbot.persist import Workdir, elapsed, skel
from rssbot.table   import Table
from rssbot.thread  import Thread, later, launch


Workdir.wdr  = ".test"


lap = 1
nrs = 1
nrcommand = 1
percall   = 1


events = []
paylock = _thread.allocate_lock()


param = Object()
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.nme = ["hnrss hackernews", ""]
param.pwd = ["bla mekker", ""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.cmd = [""]
param.mod = [""]
param.mre = [""]
param.upt = [""]
param.ver = [""]
param.req = [""]
param.now = [""]
param.dis = [""]
param.fnd = ["log", "rss", "config", "todo", ""]


pre = Object()
pre.log = ["bla", ""]
pre.cfg = ["cfg nick=mekker", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]
pre.imp = ["tests/feeds.opml", ""]


post = Object()
post.exp = ['']
post.dne = ["hnrss", ""]
post.rem = ["hnrss", ""]


rand = random.SystemRandom()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in Config.opts:
            print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Config.name.upper()} since {tme}")
    print("loaded " + ",".join(sorted(keys(Commands.names))))


def consume(evts):
    done = []
    for event in evts:
        event.wait()
        done.append(event)
    for todo in done:
        events.remove(todo)
    return done


def payload(clt, cmds):
    with paylock:
        nmr = 0
        cmdz = keys(cmds)
        if "s" in Config.opts:
            rand.shuffle(cmdz)
        for cmd in cmdz:
            examples = getattr(cmds, cmd)
            for example in examples:
                event = Event()
                event.txt = cmd + " " + example
                event.type = "command"
                events.append(event)
                clt.put(event)
                nmr += 1
        return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    except Exception as ex:
        later(ex)
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    global nrs
    global nrcommand
    enable()
    Table.debug = True
    parse(Config, " ".join(sys.argv[1:]))
    nrcommand = len(Commands.names) or 1
    if "b" in Config.opts:
        Thread.bork = True
    if "v" in Config.opts:
        banner()
    if "f" not in Config.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = Config.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, pre))
    for thr in thrs:
       thr.join()
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, param))
    for thr in thrs:
       thr.join()
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, post))
    for thr in thrs:
       thr.join()
    consume(events)


if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if "v" in Config.opts:
        if not list(Errors.errors):
            print("no errors")
        for line in Errors.errors:
            print(line)
        print(f"total: {lap} nrs: {nrs} cmds: {nrcommand} call: {percall}")

#!/usr/bin/env python3
# This file is placed in the Public Domain.


"simulate clients"


import os
import random
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from rssbot.client  import Client
from rssbot.error   import Errors
from rssbot.event   import Event
from rssbot.modules import STARTTIME, Main, Commands, command, mods, parse
from rssbot.object  import Object, fmt, keys
from rssbot.reactor import Reactor
from rssbot.thread  import Thread, launch
from rssbot.utils   import elapsed, spl
from rssbot.workdir import Workdir, skel


Main.debug  = True
Workdir.wdr = ".test"


lap = 1
nrs = 1
nrcommand = 1
percall   = 1


events = []
ignore = "dbg,"
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dis = [""]
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.fnd = ["log", "rss", "config", "todo", ""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.now = [""]
param.pwd = ["bla mekker", ""]
param.req = [""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.upt = [""]
param.ver = [""]


pre = Object()
pre.cfg = ["cfg nick=mekker", ""]
pre.imp = ["tests/feeds.opml", ""]
pre.log = ["bla", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


post = Object()
post.exp = ['']
post.dne = ["hnrss", ""]
post.rem = ["hnrss", ""]


rand = random.SystemRandom()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in Main.opts:
            print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Main.name.upper()} since {tme}")
    print("loaded " + ",".join(sorted(Commands.names)))


def consume(evts):
    done = []
    for event in evts:
        event.wait()
        done.append(event)
    for todo in done:
        events.remove(todo)
    return done


def payload(clt, cmds):
    nmr = 0
    cmdz = keys(cmds)
    if "s" in Main.opts:
        rand.shuffle(cmdz)
    for cmd in cmdz:
        if cmd in spl(ignore):
            continue
        examples = getattr(cmds, cmd)
        for example in examples:
            event = Event()
            event.txt = cmd + " " + example
            event.type = "command"
            events.append(event)
            clt.put(event)
            nmr += 1
    return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    global nrs
    global nrcommand
    parse(Main, " ".join(sys.argv[1:]))
    nrcommand = len(Commands.names) or 1
    if "v" in Main.opts:
        banner()
    if "f" not in Main.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = Main.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, pre))
    for thr in thrs:
       thr.join()
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, param))
    for thr in thrs:
       thr.join()
    for _nr in range(nrs):
        thrs.append(launch(payload, clt, post))
    for thr in thrs:
       thr.join()
    consume(events)


if __name__ == "__main__":
    wrap(main)
    for exc in Errors.errors:
        print(Errors.format(exc))
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if "v" in Main.opts:
        print(f"total: {lap} nrs: {nrs} cmds: {nrcommand} call: {percall}")

#!/usr/bin/env python3
# This file is placed in the Public Domain.


"simulate clients"


import os
import random
import queue
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from rssbot.client import Client
from rssbot.cmnd   import command, scan
from rssbot.auto   import Default
from rssbot.event  import Event
from rssbot.fleet  import Fleet
from rssbot.object import Object, keys
from rssbot.parse  import parse
from rssbot.paths  import Workdir, setwd, skel
from rssbot.thread import launch
from rssbot.utils  import elapsed, spl 


from rssbot import modules as MODS


STARTTIME = time.time()


class Main(Default):

    debug  = True
    name = Default.__module__.split(".")[-2]


Workdir.wdr = ".test"


path = MODS.__path__[0]


param = Object()
param.cmd = [""]
param.dis = [""]
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.fnd = ["log", "rss", "config", "todo", ""]
param.man = [""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.now = [""]
param.pwd = ["bla mekker", ""]
param.req = [""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.upt = [""]
param.ver = [""]


pre = Object()
pre.cfg = ["nick=mekker", ""]
pre.imp = ["tests/feeds.opml", ""]
pre.log = ["bla", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


post = Object()
post.exp = ['']
post.dne = ["hnrss", ""]
post.rem = ["hnrss", ""]


lap = 1
nrs = 1
nrcommand = 1
percall   = 1


events = queue.Queue()
ignore = "dbg,"
paylock = _thread.allocate_lock()


rand = random.SystemRandom()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in Main.opts:
            print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Main.name.upper()} since {tme}")
    print("loaded " + ",".join(sorted(dir(MODS))))


def consume(evts):
    done = []
    while True:
        event = events.get()
        event.wait()
        if events.qsize() == 0:
            break


def payload(clts, cmds):
    nmr = 0
    cmdz = sorted(keys(cmds))
    if "s" in Main.opts:
        rand.shuffle(cmdz)
    for cmd in cmdz:
        if cmd in spl(ignore):
            continue
        for clt in clts:
            examples = getattr(cmds, cmd)
            for example in examples:
                event = Event()
                event.orig = repr(clt)
                event.txt = cmd + " " + example
                event.type = "command"
                events.put(event)
                clt.put(event)
                nmr += 1
    return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    global nrs
    global nrcommand
    parse(Main, " ".join(sys.argv[1:]))
    setwd(Main.name,'.test')
    for mod in scan(MODS):
        if "Main" in dir(mod):
            mod.Main.debug = True
    nrcommand = 0
    if "v" in Main.opts:
        banner()
    if "f" not in Main.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    if "z" in Main.opts:
        nrcpu = os.cpu_count()
    else:
        nrcpu = 1
    for x in range(nrcpu):
        clt = CLI()
        clt.start()
    clts = Fleet.all() 
    nrs = Main.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clts, pre))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clts, param))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clts, post))
    for thr in thrs:
        nr = thr.join()
        if nr:
            nrcommand += nr
    consume(events)
    #Fleet.shutdown()
    #Fleet.wait()


if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    nrevents = events.qsize()
    percall = (endtime-STARTTIME)/(nrcommand)
    if "v" in Main.opts:
        if nrevents:
            print(f"{nrevents} events left.")
        print(f"total: {lap} nrs: {nrs} cmds: {nrcommand} call: %.6fs" % percall)

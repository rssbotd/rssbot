#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,W0105,W0201,W0212,W0718


"tinder"


import os
import platform
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from rssbot.command import NAME, Config, Commands, command, laps, parse, scanner
from rssbot.modules import face
from rssbot.object  import Object
from rssbot.persist import Workdir, skel
from rssbot.runtime import BufferedClient, Errors, Event, later, launch


cfg = Config()
cfg.index = 0


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()


face.rss.DEBUG = True


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dpl = ["hnrss title,url"]
param.fnd = ["log", "todo", "rss", "config", "urls"]
param.imp = ["tests/feeds.opml"]
param.log = ["bla"]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews"]
param.pwd = ["bla mekker"]
param.rem = ["hnrss"]
param.res = [""]
param.rss = ["http://hnrss.org/newest", ""]
param.tdo = ["mekker", ""]
param.ver = [""]


class CLI(BufferedClient):

    def __init__(self):
        BufferedClient.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in cfg.opts:
            print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{NAME.upper()} since {tme}")


def consume(evts):
    for evt in evts:
        evt.wait()


def errors():
    for erring in Errors.errors:
        for line in erring:
            print(line)


def payload(clt):
    with paylock:
        nmr = 0
        for cmdd in sorted(Commands.cmds):
            for ex in getattr(param, cmdd, [""]):
                evt = Event()
                evt.txt = cmdd + " " + ex
                evt.type = "command"
                clt.put(evt)
                events.append(evt)
                nmr += 1
        return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    except Exception as ex:
        later(ex)
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    Workdir.wdr = ".test"
    parse(cfg, " ".join(sys.argv[1:]))
    scanner(face)
    nrcommands = len(Commands.cmds) or 1
    if "v" in cfg.opts:
        banner()
    if "f" not in cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = cfg.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt))
    for thr in thrs:
        thr.join()
    consume(events)
    clt.wait()
    if "v" in cfg.opts:
        endtime = time.time()
        lap = laps(endtime-STARTTIME)
        percall = (endtime-STARTTIME)/(nrs*nrcommands)
        print(",".join(Commands.cmds))
        print(f"{lap} {nrs} {nrcommands} {percall}")
        if not Errors.errors:
            print("no errors")
        print(platform.python_version())


if __name__ == "__main__":
    wrap(main)
    errors()
    sys.exit(0)
